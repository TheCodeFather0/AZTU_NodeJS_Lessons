/**
 * Inquirer.js
 * A collection of common interactive command line user interfaces.
 */
import { Separator } from '@inquirer/prompts';
import type { Prettify } from '@inquirer/type';
import { default as PromptsRunner } from './ui/prompt.js';
import type { LegacyPromptConstructor, PromptFn } from './ui/prompt.js';
import type { Answers, Question, QuestionAnswerMap, QuestionArray, QuestionObservable, StreamOptions } from './types.js';
/**
 * Create a new self-contained prompt module.
 */
export declare function createPromptModule(opt?: StreamOptions): {
    <T extends Answers>(questions: QuestionArray<T> | QuestionAnswerMap<T> | QuestionObservable<T> | Question<T>, answers?: Partial<T>): Promise<Prettify<T>> & {
        ui: PromptsRunner<T>;
    };
    prompts: {
        [x: string]: LegacyPromptConstructor | PromptFn<any, any>;
    };
    /**
     * Register a prompt type
     */
    registerPrompt(name: string, prompt: LegacyPromptConstructor | PromptFn): any;
    /**
     * Register the defaults provider prompts
     */
    restoreDefaultPrompts(): void;
};
declare function registerPrompt(name: string, newPrompt: LegacyPromptConstructor): void;
declare function restoreDefaultPrompts(): void;
declare const inquirer: {
    prompt: {
        <T extends Answers>(questions: QuestionArray<T> | QuestionAnswerMap<T> | QuestionObservable<T> | Question<T>, answers?: Partial<T>): Promise<Prettify<T>> & {
            ui: PromptsRunner<T>;
        };
        prompts: {
            [x: string]: LegacyPromptConstructor | PromptFn<any, any>;
        };
        /**
         * Register a prompt type
         */
        registerPrompt(name: string, prompt: LegacyPromptConstructor | PromptFn): any;
        /**
         * Register the defaults provider prompts
         */
        restoreDefaultPrompts(): void;
    };
    ui: {
        Prompt: typeof PromptsRunner;
    };
    createPromptModule: typeof createPromptModule;
    registerPrompt: typeof registerPrompt;
    restoreDefaultPrompts: typeof restoreDefaultPrompts;
    Separator: typeof Separator;
};
export default inquirer;
